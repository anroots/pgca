<?xml version="1.0" encoding="UTF-8" ?>
<container xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xmlns="http://symfony.com/schema/dic/services"
           xsi:schemaLocation="http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd">

    <services>

        <!-- CLI -->
        <service id="cli.command.rules.listCommand" class="Anroots\Pgca\Cli\Command\Rules\ListCommand">
            <tag name="ruleSetAware" />
        </service>
        <service id="cli.command.rules.showCommand" class="Anroots\Pgca\Cli\Command\Rules\ShowCommand">
            <tag name="ruleSetAware" />
        </service>


        <service id="config" class="Anroots\Pgca\Config">
            <call method="load"/>
        </service>

        <service id="abstractSetConfigurator" abstract="true">
            <argument type="service" id="service_container"/>
            <argument type="service" id="config"/>
        </service>

        <service id="commit.analyzer.ruleSetConfigurator" class="Anroots\Pgca\Commit\Analyzer\RuleSetConfigurator"
                 parent="abstractSetConfigurator"/>

        <service id="commit.provider.filterSetConfigurator" class="Anroots\Pgca\Commit\Provider\FilterSetConfigurator"
                 parent="abstractSetConfigurator"/>


        <service id="commit.analyzer.analyzer" class="Anroots\Pgca\Commit\Analyzer\Analyzer">
            <argument type="service" id="report"/>
            <configurator service="commit.analyzer.ruleSetConfigurator" method="load"/>
        </service>

        <service id="git.commit.factory" class="Anroots\Pgca\Git\Commit\Factory"/>


        <service id="report" class="Anroots\Pgca\Report"/>
        <service id="rule.violationFactory" class="Anroots\Pgca\Rule\ViolationFactory"/>

        <!-- Filters -->
        <service id="commit.filter.isNotMergeCommit" class="Anroots\Pgca\Commit\Filter\IsNotMergeCommit"/>
        <service id="commit.filter.containsRegex" class="Anroots\Pgca\Commit\Filter\ContainsRegex"/>

        <!-- Report -->
        <service id="report.composer.abstractComposer" abstract="true">
            <argument type="service" id="report.reportHeader"/>
        </service>

        <service id="report.reportBuilder" class="Anroots\Pgca\Report\ReportBuilder" scope="prototype"/>

        <service id="report.reportHeader" class="Anroots\Pgca\Report\ReportHeader">
            <argument type="service">
                <service class="DateTime"/>
            </argument>
        </service>

        <service id="report.composer.simpleReport" class="Anroots\Pgca\Report\Composer\SimpleReport"
                 parent="report.composer.abstractComposer"/>
        <service id="report.composer.fullReport" class="Anroots\Pgca\Report\Composer\FullReport"
                 parent="report.composer.abstractComposer"/>
        <service id="report.composer.blameReport" class="Anroots\Pgca\Report\Composer\BlameReport"
                 parent="report.composer.abstractComposer"/>

        <!-- Printers -->
        <service id="report.printer.filePrinter" class="Anroots\Pgca\Report\Printer\FilePrinter"/>

        <!-- Serializers -->
        <service id="report.serializer.jsonSerializer" class="Anroots\Pgca\Report\Serializer\JsonSerializer"/>
        <service id="report.serializer.htmlSerializer" class="Anroots\Pgca\Report\Serializer\HtmlSerializer">
            <argument type="service">
                <service class="Mustache_Engine"/>
            </argument>
        </service>
        <service id="report.serializer.consoleSerializer" class="Anroots\Pgca\Report\Serializer\ConsoleSerializer">
            <argument type="service">
                <service class="Symfony\Component\Console\Output\BufferedOutput"/>
            </argument>
        </service>
        <service id="report.printer.consolePrinter" class="Anroots\Pgca\Report\Printer\ConsolePrinter"/>

        <!-- Providers -->
        <service id="commit.provider.abstractProvider" class="Anroots\Pgca\Commit\Provider\AbstractProvider"
                 abstract="true">
            <argument type="service" id="git.commit.factory"/>
            <configurator service="commit.provider.filterSetConfigurator" method="load"/>
        </service>

        <service id="github.client" class="Github\Client" public="false"/>

        <service id="commit.provider.fileSystemProvider" class="Anroots\Pgca\Commit\Provider\FileSystemProvider"
                 parent="commit.provider.abstractProvider"/>
        <service id="commit.provider.gitHubProvider" class="Anroots\Pgca\Commit\Provider\GitHubProvider"
                 parent="commit.provider.abstractProvider">
            <argument type="service" id="github.client"/>
        </service>


        <!-- Rules -->
        <service id="rule.abstractRule" abstract="true"
                 class="Anroots\Pgca\Rule\AbstractRule">
            <argument type="service" id="rule.violationFactory"/>
        </service>

        <service id="rule.message.hasSummaryAndDescription" parent="rule.abstractRule"
                 class="Anroots\Pgca\Rule\Message\HasSummaryAndDescription">
            <tag name="rule"/>
        </service>
        <service id="rule.message.isLongEnough" parent="rule.abstractRule"
                 class="Anroots\Pgca\Rule\Message\IsLongEnough">
            <tag name="rule"/>
        </service>
        <service id="rule.message.startsWithCapitalLetter" parent="rule.abstractRule"
                 class="Anroots\Pgca\Rule\Message\StartsWithCapitalLetter">
            <tag name="rule"/>
        </service>
        <service id="rule.message.summaryFiftyOrLessChars" parent="rule.abstractRule"
                 class="Anroots\Pgca\Rule\Message\SummaryFiftyOrLessChars">
            <tag name="rule"/>
        </service>
        <service id="rule.message.oneBlankLineAfterSummary" parent="rule.abstractRule"
                 class="Anroots\Pgca\Rule\Message\OneBlankLineAfterSummary">
            <tag name="rule"/>
        </service>
        <service id="rule.message.noTrailingWhitespace" parent="rule.abstractRule"
                 class="Anroots\Pgca\Rule\Message\NoTrailingWhitespace">
            <tag name="rule"/>
        </service>
        <service id="rule.message.noTrailingNewline" parent="rule.abstractRule"
                 class="Anroots\Pgca\Rule\Message\NoTrailingNewline">
            <tag name="rule"/>
        </service>
        <service id="rule.message.noDoubleWhitespace" parent="rule.abstractRule"
                 class="Anroots\Pgca\Rule\Message\NoDoubleWhitespace">
            <tag name="rule"/>
        </service>
        <service id="rule.message.allLinesLessThanThresholdChars" parent="rule.abstractRule"
                 class="Anroots\Pgca\Rule\Message\AllLinesLessThanThresholdChars">
            <tag name="rule"/>
        </service>
        <service id="rule.message.notTypicalNonsense" parent="rule.abstractRule"
                 class="Anroots\Pgca\Rule\Message\NotTypicalNonsense">
            <tag name="rule"/>
        </service>
        <service id="rule.message.noProfanity" parent="rule.abstractRule"
                 class="Anroots\Pgca\Rule\Message\NoProfanity">
            <tag name="rule"/>
            <argument type="service">
                <service class="swearjar\Tester" />
            </argument>
            <tag name="rule"/>
        </service>
        <service id="rule.message.summaryDoesNotEndWithPeriod" parent="rule.abstractRule"
                 class="Anroots\Pgca\Rule\Message\SummaryDoesNotEndWithPeriod">
            <tag name="rule"/>
        </service>
        <service id="rule.content.hasNoIgnoredFiles" parent="rule.abstractRule"
                 class="Anroots\Pgca\Rule\Content\HasNoIgnoredFiles">
            <tag name="rule"/>
        </service>
    </services>
</container>
